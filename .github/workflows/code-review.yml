name: AI Code Review & Implementation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      review_type:
        description: 'Type of review'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - security
        - performance
        - architecture
        - implementation
      implement_suggestions:
        description: 'Auto-implement suggestions'
        required: false
        default: false
        type: boolean

env:
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  code-review:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔑 Check API Key
      id: check-key
      run: |
        if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "skip=true" >> $GITHUB_OUTPUT
          echo "⚠️ GEMINI_API_KEY not found, skipping AI review"
        else
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "✅ GEMINI_API_KEY found, proceeding with AI review"
        fi
        
    - name: 🛎️ Checkout PR
      if: steps.check-key.outputs.skip == 'false'
    - name: 🛎️ Checkout PR
      if: steps.check-key.outputs.skip == 'false'
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🟢 Setup Node.js
      if: steps.check-key.outputs.skip == 'false'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      if: steps.check-key.outputs.skip == 'false'
      run: |
        # Install main project dependencies
        npm install
        
        # Check if gemini-cli directory exists and has package.json
        if [ -d "tools/gemini-cli" ] && [ -f "tools/gemini-cli/package.json" ]; then
          cd tools/gemini-cli && npm install
        else
          echo "⚠️ Gemini CLI package.json not found, skipping CLI dependencies"
        fi
        
    - name: 🔧 Setup Environment
      if: steps.check-key.outputs.skip == 'false'
      run: |
        echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" > tools/gemini-cli/.env
        echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> tools/gemini-cli/.env
        echo "PR_NUMBER=${{ github.event.number }}" >> tools/gemini-cli/.env
        
    - name: 🔍 Get Changed Files
      if: steps.check-key.outputs.skip == 'false'
      id: changed-files
      run: |
        git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} > changed-files.txt
        echo "changed_files=$(cat changed-files.txt | tr '\n' ',')" >> $GITHUB_OUTPUT
        
    - name: 🕵️ Run Code Review Analysis
      if: steps.check-key.outputs.skip == 'false'
      run: |
        npm run cli:review-pr "${{ github.event.number }}" "${{ inputs.review_type || 'full' }}"
      continue-on-error: true
      
    - name: 🔧 Generate Implementation Suggestions
      if: steps.check-key.outputs.skip == 'false' && github.event_name == 'workflow_dispatch' && inputs.implement_suggestions == 'true'
      run: |
        npm run cli:implement-suggestions "${{ github.event.number }}"
      continue-on-error: true
      
    - name: 🏗️ Auto-implement Safe Changes
      if: steps.check-key.outputs.skip == 'false' && github.event_name == 'workflow_dispatch' && inputs.implement_suggestions == 'true'
      run: |
        npm run cli:auto-implement "${{ github.event.number }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action AI"
        git add .
        if ! git diff --staged --quiet; then
          git commit -m "feat: AI-implemented improvements [auto-generated]"
          git push
        fi
      continue-on-error: true
        
    - name: 📊 Security Analysis
      if: steps.check-key.outputs.skip == 'false'
      run: |
        npm run cli:security-scan > security-report.md || echo "Security scan failed"
      continue-on-error: true
        
    - name: ⚡ Performance Analysis
      if: steps.check-key.outputs.skip == 'false'
      run: |
        npm run cli:performance-review > performance-report.md || echo "Performance review failed"
      continue-on-error: true
        
    - name: 📤 Upload Review Results
      if: always() && steps.check-key.outputs.skip == 'false'
      uses: actions/upload-artifact@v4
      with:
        name: code-review-results-${{ github.event.number || github.run_number }}
        path: |
          code-review-*.md
          security-report.md
          performance-report.md
          implementation-suggestions.md
        retention-days: 30
        
    - name: 💬 Post Review Comments
      if: steps.check-key.outputs.skip == 'false' && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read review results
          let reviewComment = '## 🤖 AI Code Review Results\n\n';
          
          try {
            if (fs.existsSync('code-review-summary.md')) {
              const review = fs.readFileSync('code-review-summary.md', 'utf8');
              reviewComment += review;
            }
            
            if (fs.existsSync('security-report.md')) {
              reviewComment += '\n## 🔒 Security Analysis\n';
              const security = fs.readFileSync('security-report.md', 'utf8');
              reviewComment += security.substring(0, 1000) + '...';
            }
            
            if (fs.existsSync('performance-report.md')) {
              reviewComment += '\n## ⚡ Performance Review\n';
              const performance = fs.readFileSync('performance-report.md', 'utf8');
              reviewComment += performance.substring(0, 1000) + '...';
            }
            
            reviewComment += '\n\n📎 **Full reports available in artifacts**';
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reviewComment
            });
          } catch (error) {
            console.log('Error posting review comment:', error);
          }
